inputs:
  os_subnet:
    description: >
      OpenStack name or ID of the subnet that's connected to the
      network that is to be used by the manager


dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: os_username }
    password: { get_input: os_password }
    tenant_name: { get_input: os_tenant }
    auth_url: { get_input: os_auth_url }
    region: { get_input: os_region }


node_types:
  cloudify.nodes.ScalingResource:
    derived_from: cloudify.nodes.Root


node_templates:
  os_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: true
      resource_id: { get_input: os_subnet }
    relationships:
      - target: os_network
        type: cloudify.relationships.contained_in


  {% for ip in ips_list %}
  os_port{{loop.index0}}:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_configuration
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.neutron_plugin.port.create
          inputs:
            args:
              fixed_ips: {{ip}}

  {% endfor %}


    relationships:
    - type: cloudify.relationships.contained_in
      target: os_network
    - type: cloudify.openstack.port_connected_to_subnet
      target: os_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: os_security_group

  {% for hostname in hosts_list %}
  {{hostname}}:
    type: cloudify.openstack.nodes.Host
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: os_keypair
      - type: cloudify.openstack.server_connected_to_port
        target: os_port{{loop.index0}}
      - type: cloudify.openstack.server_connected_to_server_group
        target: os_server_group
      # We're doing "contained_in" here, in order to take advantage of the
      # scaling semantics. We need all group members to be contained
      # in the same node
      - type: cloudify.relationships.contained_in
        target: os_network

    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              security_groups: [{ get_attribute: [ os_security_group, external_name ]}]
              block_device_mapping_v2: { get_input: os_device_mapping }
              name: {{hostname}}
  {% endfor %}
