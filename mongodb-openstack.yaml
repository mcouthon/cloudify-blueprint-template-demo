tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.5/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.6.0/plugin.yaml
  - mongodb/types/mongodbtypes.yaml
  - mongodb/imports/mongodbV3.2-blueprint.yaml

inputs:

  agent_key_private:
    description: >
      The content of the agent's private key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: >
      The content of the agent's public key.
    default: { get_secret: agent_key_public }

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  image:
    description: >
      An Openstack Image ID. Tested with a Ubuntu 14.04 image.
    type: string
    default: { get_secret: ubuntu_trusty_image }

  flavor:
    description: >
      An Openstack Flavor ID.
    default: '2'

  manager_network:
    default: external

  network_deployment_name:
    default: openstack-example-network

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    region: { get_secret: keystone_region }

  compute_properties: &compute_properties
    openstack_config: *openstack_config
    agent_config:
      network: { get_input: manager_network }
      user: { get_input: agent_user }
      install_method: init_script
      port: 22
      key: { get_input: agent_key_private }
    server:
      key_name: ''
      image: { get_input: image }
      flavor: { get_input: flavor }
    management_network_name: ''

  host_list: []

node_templates:
  {% for host in ['mongod_host', 'mongos_host', 'mongo_config_host'] %}
  {{host}}:
    type: cloudify.openstack.nodes.Server
    properties: *compute_properties
    relationships:
      - target: mongodb_host_port
        type: cloudify.openstack.server_connected_to_port
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: openstack.nova_plugin.server.create
          inputs:
            args:
              image: { get_input: image }
              flavor: { get_input: flavor }
              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
  {% endfor %}

#  mongod_host:
#    type: cloudify.openstack.nodes.Server
#    properties: *compute_properties
#    relationships:
#      - target: mongodb_host_port
#        type: cloudify.openstack.server_connected_to_port
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        create:
#          implementation: openstack.nova_plugin.server.create
#          inputs:
#            args:
#              image: { get_input: image }
#              flavor: { get_input: flavor }
#              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
#
#  mongos_host:
#    type: cloudify.openstack.nodes.Server
#    properties: *compute_properties
#    relationships:
#      - target: mongos_host_port
#        type: cloudify.openstack.server_connected_to_port
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        create:
#          implementation: openstack.nova_plugin.server.create
#          inputs:
#            args:
#              image: { get_input: image }
#              flavor: { get_input: flavor }
#              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
#
#  mongo_config_host:
#    type: cloudify.openstack.nodes.Server
#    properties: *compute_properties
#    relationships:
#      - target: mongo_host_port
#        type: cloudify.openstack.server_connected_to_port
#    interfaces:
#      cloudify.interfaces.lifecycle:
#        create:
#          implementation: openstack.nova_plugin.server.create
#          inputs:
#            args:
#              image: { get_input: image }
#              flavor: { get_input: flavor }
#              userdata: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }

  mongodb_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network
    - type: cloudify.relationships.depends_on
      target: public_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: mongodb_host_ip

  mongodb_host_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_id: { get_attribute: [ openstack, deployment, outputs, external_network ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack

  mongos_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network
    - type: cloudify.relationships.depends_on
      target: public_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: mongos_host_ip

  mongos_host_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_id: { get_attribute: [ openstack, deployment, outputs, external_network ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack

  mongo_host_port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: *openstack_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network
    - type: cloudify.relationships.depends_on
      target: public_subnet
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: mongo_host_ip

  mongo_host_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_id: { get_attribute: [ openstack, deployment, outputs, external_network ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack

  public_subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_attribute: [ openstack, deployment, outputs, public_subnet ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: public_network

  public_network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: *openstack_config
      use_external_resource: true
      resource_id: { get_attribute: [ openstack, deployment, outputs, public_network ] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        description: generic security group
      rules:
        {% for host in ['mongod', 'mongos', 'mongo_config'] %}
          - remote_ip_prefix: 0.0.0.0/0
            port: { get_property: [ {{host}}, port] }
        {% endfor %}
#        - remote_ip_prefix: 0.0.0.0/0
#          port: { get_property: [mongod, port] }
#        - remote_ip_prefix: 0.0.0.0/0
#          port: { get_property: [mongos, port] }
#        - remote_ip_prefix: 0.0.0.0/0
#          port: { get_property: [mongo_config, port] }
    relationships:
    - type: cloudify.relationships.contained_in
      target: openstack

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        users:
        - name: { get_input: agent_user }
          shell: /bin/bash
          sudo: ['ALL=(ALL) NOPASSWD:ALL']
          ssh-authorized-keys:
          - { get_input: agent_key_public }

  openstack:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: { get_input: network_deployment_name }
          blueprint_archive: https://github.com/cloudify-examples/openstack-example-network/archive/master.zip
          main_file_name: simple-blueprint.yaml
          external_resource: external
        deployment:
          id: { get_input: network_deployment_name }
          outputs:
            external_network: external_network
            public_network_router: public_network_router
            public_network: public_network
            private_network: private_network
            public_subnet: public_subnet
            private_subnet: private_subnet
          external_resource: external
        reexecute: false
